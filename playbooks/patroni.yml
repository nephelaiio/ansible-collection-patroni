---
- name: Set cluster facts
  ansible.builtin.import_playbook: nephelaiio.patroni.facts


- name: Deploy Patroni cluster members
  hosts: "_patroni_cluster_master:_patroni_cluster_slave"
  any_errors_fatal: true
  become: true
  vars_files:
    - main.yml
  roles:
    - nephelaiio.patroni.pgdg
  tasks:
    - name: Check required parameters
      ansible.builtin.assert:
        that:
          - _patroni_cluster_name is defined
          - _patroni_cluster_api_password is defined
          - _patroni_cluster_replication_password is defined
          - _patroni_cluster_postgres_password is defined
      tags: always

    - name: Set PostgreSQL facts
      ansible.builtin.include_role:
        name: nephelaiio.patroni.postgresql
        tasks_from: vars.yml
      tags: always

    - name: Stat PostgreSQL config file
      ansible.builtin.stat:
        path: "{{ _postgresql_conf_main }}"
      register: _postgresql_conf_main_query

    - name: Deploy PostgreSQL Debian packages
      when: ansible_os_family == "Debian"
      block:
        - name: Query PostgreSQL releases
          ansible.builtin.shell:
            cmd: "apt-cache madison {{ item }} | awk -F'|' '{ print $2 }' | grep {{ _release }} | {{ _format }}"
            executable: "/bin/bash"
          vars:
            _format: "uniq | sort -r | head -1 | xargs"
            _release: "{{ _patroni_release_postgresql }}"
          loop: "{{ [_postgresql_package_all] | flatten }}"
          register: _postgresql_versions
          changed_when: false

        - name: Install PostgreSQL
          ansible.builtin.include_role:
            name: nephelaiio.patroni.postgresql
          vars:
            _map_join: "nephelaiio.plugins.map_join"
            _results: "{{ _postgresql_versions.results }}"
            _conf_exists: "{{ _postgresql_conf_main_query.stat.exists }}"
            postgresql_conf_main_file: "{{ _conf_exists | ternary('postgresql.base.conf', 'postgresql.conf') }}"
            postgresql_package_name: "{{ _results | map(_map_join, ['item', 'stdout'], '=') }}"

    - name: Deploy PostgreSQL RedHat packages
      when: ansible_os_family == "RedHat"
      block:
        - name: Query PostgreSQL releases
          ansible.builtin.shell:
            cmd: "yum list {{ item }} --showduplicates | grep '{{ _release }}' | {{ _format }}"
          vars:
            _format: "awk -v OFS='=' '{ print $1,$2 }' | sed -E 's/[.][^=]+//' | tail -1 | xargs"
            _release: "{{ _patroni_release_postgresql }}"
          loop: "{{ [_postgresql_package_all] | flatten }}"
          register: _postgres_versions
          changed_when: false

        - name: Install PostgreSQL
          ansible.builtin.include_role:
            name: nephelaiio.patroni.postgresql
          vars:
            _conf_exists: "{{ _postgresql_conf_main_query.stat.exists }}"
            postgresql_conf_main_file: "{{ _conf_exists | ternary('postgresql.base.conf', 'postgresql.conf') }}"
            postgresql_package_name: "{{ _postgres_versions.results | map(attribute='stdout') }}"

    - name: Configure watchdog support
      when: _patroni_watchdog_enable | bool
      block:
        - name: Load watchdog module
          community.general.modprobe:
            name: softdog
            persistent: present

        - name: Set watchdog permissions
          ansible.builtin.command: "chown {{ _postgresql_user }}:{{ _postgresql_group }} /dev/watchdog"

    - name: Install Patroni
      ansible.builtin.package:
        name:
          - patroni
          - python3-consul

    - name: Install Patroni Consul support for RedHat derivatives
      ansible.builtin.package:
        name: patroni-consul
      when: ansible_os_family == 'RedHat'

    - name: Clean up configuration templates
      ansible.builtin.file:
        path: "{{ _patroni_cluster_config_path }}/{{ item }}"
        state: absent
      loop:
        - config.yml.in
        - dcs.yml

    - name: Bootstrap cluster configuration
      ansible.builtin.template:
        src: "patroni.yml.j2"
        dest: "{{ _patroni_cluster_config_file }}"
        validate: "patroni --validate-config %s"
        force: false
        owner: "{{ _postgresql_user }}"
        group: "{{ _postgresql_group }}"
        mode: 0640
      tags: configure
      vars:
        _slot: "[ '%s', { 'type': 'physical' } ]"
        _cluster_size: "{{ _cluster_hosts | length }}"
        _cluster_hosts: "{{ groups[_patroni_cluster_hostgroup] }}"
        _cluster_slot_data: "[ {{ _cluster_hosts | map('nephelaiio.plugins.map_format', _slot) | join(',') }} ]"
        _cluster_slots: "{{ _cluster_slot_data | community.general.dict }}"
        _barman_slot_data: "[ {{ [_patroni_cluster_slot_barman] | map('nephelaiio.plugins.map_format', _slot) | join(',') }} ]"
        _barman_slots: "{{ _barman_slot_data | community.general.dict }}"
        _config_cluster_name: "{{ _patroni_cluster_name }}"
        _config_port_psql: "{{ _patroni_cluster_port_psql }}"
        _config_port_restapi: "{{ _patroni_cluster_port_restapi }}"
        _config_datadir: "{{ _postgresql_datadir }}"
        _config_socketdir: "{{ _postgresql_socketdir }}"
        _config_host_name: "{{ ansible_hostname }}"
        _config_configdir: "{{ _postgresql_confdir }}"
        _config_bindir: "{{ _postgresql_bindir }}"
        _config_address: "{{ ansible_default_ipv4.address }}"
        _config_slots: "{{ _cluster_slots | combine(_barman_slots) | to_nice_yaml(indent=2) }}"
        _config_api_username: "{{ _patroni_cluster_api_username }}"
        _config_api_password: "{{ _patroni_cluster_api_password }}"
        _config_postgres_password: "{{ _patroni_cluster_postgres_password }}"
        _config_replication_username: "{{ _patroni_cluster_replication_username }}"
        _config_replication_password: "{{ _patroni_cluster_replication_password }}"
        _config_rewind_username: "{{ _patroni_cluster_rewind_username }}"
        _config_rewind_password: "{{ _patroni_cluster_rewind_password }}"
        _config_watchdog_mode: "{{ _patroni_watchdog_mode }}"
        _config_encoding: "{{ _patroni_config_encoding }}"
        _config_locale: "{{ _patroni_config_locale }}"
        _config_maxlag_failover: "{{ _patroni_cluster_maxlag_failover }}"
        _config_maxlag_sync: "{{ _patroni_cluster_maxlag_sync }}"
        _config_start_timeout: "{{ _patroni_cluster_start_timeout }}"
        _config_hba: "{{ _patroni_cluster_hba_base + _patroni_cluster_hba_extra }}"

    - name: Manage Patroni profile
      ansible.builtin.lineinfile:
        path: "/etc/profile.d/patroni.sh"
        line: "alias patronictl='patronictl -c {{ _patroni_cluster_config_file }}'"
        create: true
        owner: root
        group: root
        mode: 0644

    - name: Slurp Patroni configuration
      ansible.builtin.slurp:
        path: "{{ _patroni_cluster_config_file }}"
      register: _patroni_config_query

    - name: Set Patroni configuration facts
      ansible.builtin.set_fact:
        _api_username: "{{ _config_data.restapi.authentication.username }}"
        _api_password: "{{ _config_data.restapi.authentication.password }}"
      vars:
        _config_data: "{{ _patroni_config_query.content | ansible.builtin.b64decode | from_yaml }}"

    - name: Start Patroni master node
      when: inventory_hostname in groups[_patroni_groups_master]
      block:
        - name: Start Patroni master service
          ansible.builtin.service:
            name: "{{ _patroni_cluster_service_name }}"
            state: started
            enabled: true

        - name: Verify primary liveness
          ansible.builtin.uri:
            url: "http://localhost:{{ _patroni_cluster_port_restapi }}/liveness"
            user: "{{ _api_username }}"
            password: "{{ _api_password }}"
            method: GET
            status_code: 200
            timeout: 3
          retries: 30
          delay: "{{ ((_patroni_cluster_start_timeout | int) / 10) | round(0, 'ceil') | int }}"

        - name: Verify primary status
          ansible.builtin.uri:
            url: "http://localhost:{{ _patroni_cluster_port_restapi }}/primary"
            user: "{{ _api_username }}"
            password: "{{ _api_password }}"
            method: GET
            status_code: 200
            timeout: 3
          retries: 30
          delay: "{{ ((_patroni_cluster_start_timeout | int) / 10) | round(0, 'ceil') | int }}"

    - name: Start Patroni slave node
      when: inventory_hostname not in groups[_patroni_groups_master]
      block:
        - name: Start Patroni slave services
          ansible.builtin.service:
            name: "{{ _patroni_cluster_service_name }}"
            state: started
            enabled: true

        - name: Verify replica liveness
          ansible.builtin.uri:
            url: "http://localhost:{{ _patroni_cluster_port_restapi }}/liveness"
            user: "{{ _api_username }}"
            password: "{{ _api_password }}"
            method: GET
            status_code: 200
            timeout: 3
          retries: 30
          delay: "{{ ((_patroni_cluster_start_timeout | int) / 10) | round(0, 'ceil') | int }}"

        - name: Verify replica status
          ansible.builtin.uri:
            url: "http://localhost:{{ _patroni_cluster_port_restapi }}/replica"
            user: "{{ _api_username }}"
            password: "{{ _api_password }}"
            method: GET
            status_code: 200
            timeout: 3
          retries: 30
          delay: "{{ ((_patroni_cluster_start_timeout | int) / 10) | round(0, 'ceil') | int }}"

  handlers:
    - name: Reload Patroni
      ansible.builtin.service:
        name: "{{ _patroni_cluster_service_name }}"
        state: reloaded
      listen:
        - patroni_reload
        - postgresql_reload
      tags: always
