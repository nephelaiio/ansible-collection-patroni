---
- name: Set cluster facts
  ansible.builtin.import_playbook: nephelaiio.patroni.facts

- name: Query PostgreSQL cluster status
  hosts: "{{ _patroni_cluster_group }}"
  become: true
  vars_files:
    - main.yml
  tasks:
    - name: Query cluster status
      community.postgresql.postgresql_query:
        query: "SELECT pg_is_in_recovery()"
        db: postgres
      become: true
      become_user: "{{ _postgresql_user }}"
      register: _slave_query
      ignore_errors: true

    - name: Set cluster membership facts
      ansible.builtin.set_fact:
        _cluster_alien: "{{ _is_alien | bool }}"
        _cluster_member: "{{ _is_member | bool }}"
        _cluster_master: "{{ _is_master | bool }}"
        _cluster_slave: "{{ _is_slave | bool }}"
      vars:
        _is_member: "{{ _slave_query is succeeded }}"
        _is_alien: "{{ not _is_member | bool }}"
        _is_slave: "{{ False if _is_alien else _slave_query.query_result[0].pg_is_in_recovery }}"
        _is_master: "{{ _is_member | bool and not _is_slave | bool }}"

    - name: Group deployed hosts
      ansible.builtin.group_by:
        key: "_cluster_{{ 'alien' if _cluster_alien else _status }}"
      vars:
        _status: "{{ 'master' if _cluster_master else 'slave' }}"

    - name: Set hostgroup facts
      ansible.builtin.set_fact:
        _hosts_aliens: "{{ _aliens | difference(_bootstrap) }}"
        _hosts_masters: "{{ _masters }}"
        _hosts_slaves: "{{ _slaves | difference(_bootstrap) }}"
        _hosts_bootstrap: "{{ _bootstrap }}"
      vars:
        _aliens: "{{ groups['_cluster_alien'] | default([]) }}"
        _masters: "{{ groups['_cluster_master'] | default([]) }}"
        _slaves: "{{ groups['_cluster_slave'] | default([]) }}"
        _bootstrap: "{{ [] if (_masters | length > 0) else [(_aliens + _slaves) | first] }} "
      run_once: true

    - name: Verify cluster status
      ansible.builtin.assert:
        that:
          - _unique_master | bool
          - _slaves_have_master | bool
        fail_msg: "PostgreSQL cluster is in an inconsistent state"
      vars:
        _unique_master: "{{ _hosts_masters | length < 2 }}"
        _has_master: "{{ _hosts_masters | length > 0  }}"
        _has_slaves: "{{ _hosts_slaves | length > 0 }}"
        _slaves_have_master: "{{ not _has_slaves or _has_master }}"

    - name: Debug cluster bootstrap status
      ansible.builtin.debug:
        msg: |
          Bootstrapping new cluster on hosts [{{ ','.join(play_hosts) }}]
          with master {{ _bootstrap | first }}
      when: _bootstrap | length > 0

    - fail:


- name: Deploy Patroni components
  hosts: "{{ _patroni_cluster_hostgroup }}"
  become: true
  vars_files:
    - main.yml
  roles:
    - nephelaiio.patroni.pgdg
    - nephelaiio.patroni.postgresql
  tasks:
    - name: Check required parameters
      ansible.builtin.assert:
        that:
          - _patroni_cluster_name is defined
          - _patroni_cluster_api_password is defined
          - _patroni_cluster_replication_password is defined

    - name: Install Patroni
      ansible.builtin.package:
        name:
          - patroni
          - python3-consul

    - name: Clean up configuration templates
      ansible.builtin.file:
        path: "{{ _patroni_cluster_config_path }}/{{ item }}"
        state: absent
      loop:
        - config.yml.in
        - dcs.yml

    - name: Bootstrap cluster configuration
      ansible.builtin.template:
        src: "patroni.yml.j2"
        dest: "{{ _patroni_cluster_config_path }}/config.yml"
        force: false
      vars:
        _cluster_size: "{{ _cluster_hosts | length }}"
        _cluster_slot: "[ '%s', { 'type': 'physical' } ]"
        _cluster_hosts: "{{ groups[_patroni_cluster_hostgroup] }}"
        _cluster_slots: "[ {{ _cluster_hosts | map('nephelaiio.plugins.map_format', _cluster_slot) | join(',') }} ]"
        _config_cluster_name: "{{ _patroni_cluster_name }}"
        _config_datadir: "{{ _postgresql_datadir }}"
        _config_socketdir: "{{ _postgresql_socketdir }}"
        _config_host_name: "{{ ansible_hostname }}"
        _config_configdir: "{{ _postgresql_confdir }}"
        _config_bindir: "{{ _postgresql_bindir }}"
        _config_address: "{{ ansible_default_ipv4.address }}:5432"
        _config_slots: "{{ _cluster_slots | community.general.dict | to_nice_yaml(indent=2) }}"
        _config_synchronous_node_count: "{{ _cluster_size | int - 2 }}"
        _config_api_username: "{{ _patroni_cluster_api_username }}"
        _config_api_password: "{{ _patroni_cluster_api_password }}"
        _config_replication_username: "{{ _patroni_cluster_replication_username }}"
        _config_replication_password: "{{ _patroni_cluster_replication_password }}"

    - name: Start Patroni service
      ansible.builtin.service:
        name: patroni
        state: started
        enabled: true
