---
- name: Deploy Patroni {{ _patroni_extension }} extension
  hosts: _patroni_cluster_master
  any_errors_fatal: true
  become: true
  vars_files:
    - main.yml
  tasks:
    - name: Set {{ _patroni_extension }} extension facts
      ansible.builtin.set_fact:
        _extension_enable: "{{ lookup('ansible.builtin.vars', _extension_enable_vardef) }}"
        _extension_config: "{{ lookup('ansible.builtin.vars', _extension_config_vardef) }}"
        _extension_path: "{{ lookup('ansible.builtin.vars', _extension_path_vardef) }}"
      vars:
        _extension_enable_vardef: "{{ lookup('ansible.builtin.varnames', '^_patroni_cluster_' + _patroni_extension + '_enable$') }}"
        _extension_config_vardef: "{{ lookup('ansible.builtin.varnames', '^_patroni_cluster_' + _patroni_extension + '_config') }}"
        _extension_path_vardef: "{{ lookup('ansible.builtin.varnames', '^_patroni_config_' + _patroni_extension + '$') }}"

    - name: Unregister PostgreSQL {{ _patroni_extension }} extension
      when: not (_extension_enable | bool)
      block:
        - name: Disable {{ _patroni_extension }} extension
          community.postgresql.postgresql_query:
            query: "DROP EXTENSION IF EXISTS {{ _patroni_extension }}"
            db: postgres
          become_user: "{{ _postgresql_user }}"

        - name: Destroy PostgreSQL {{ _patroni_extension }} config
          ansible.builtin.file:
            path: "{{ _postgresql_conf_include }}/{{ _extension_path }}"
            state: absent
          when: not (_extension_enable | bool)
          notify: postgresql_reload

    - name: Register PostgreSQL {{ _patroni_extension }} extension
      when: _extension_enable | bool
      block:
        - name: Manage PostgreSQL {{ _patroni_extension }} include config
          ansible.builtin.copy:
            dest: "{{ _postgresql_conf_include }}/{{ _extension_path }}"
            content: "{{ _extension_config }}"
            owner: "{{ _postgresql_user }}"
            group: "{{ _postgresql_group }}"
            mode: 0644
          notify: patroni_reload

        - name: Enable {{ _patroni_extension }} extension
          community.postgresql.postgresql_query:
            query: "CREATE EXTENSION IF NOT EXISTS {{ _patroni_extension }}"
            db: postgres
          become_user: "{{ _postgresql_user }}"

  handlers:
    - name: Reload Patroni
      ansible.builtin.service:
        name: "{{ _patroni_cluster_service_name }}"
        state: reloaded
      listen:
        - patroni_reload
        - postgresql_reload
      tags: always
