---
- name: Set cluster facts
  ansible.builtin.import_playbook: nephelaiio.patroni.facts
  vars:
    patroni_bootstrap_allow: false


- name: Manage Barman users
  hosts: _patroni_cluster_master
  become: true
  vars_files:
    - main.yml
  tasks:
    - name: Manage PostgreSQL Barman role
      community.postgresql.postgresql_user:
        name: "{{ _patroni_cluster_barman_username }}"
        password: "{{ _patroni_cluster_barman_password }}"
        role_attr_flags: SUPERUSER
      no_log: "{{ _patroni_nolog }}"
      become_user: "{{ _postgresql_user }}"


- name: Deploy Barman
  hosts: "{{ _patroni_barman_hostgroup }}"
  become: true
  any_errors_fatal: true
  vars_files:
    - main.yml
  roles:
    - nephelaiio.patroni.pgdg
  tasks:
    - name: Set PostgreSQL facts
      ansible.builtin.include_role:
        name: nephelaiio.patroni.postgresql
        tasks_from: vars.yml

    - name: Install PostgreSQL client packages
      ansible.builtin.package:
        name: "{{ _postgresql_package_client }}"

    - name: Install yum package requirements
      ansible.builtin.package:
        name: openssh-clients
      when: ansible_os_family == 'RedHat'

    - name: Install Barman packages
      ansible.builtin.package:
        name: barman

    - name: Distribute SSH control public keys
      block:
        - name: Create SSH directory
          ansible.builtin.file:
            path: "{{ _patroni_barman_ssh_keypair | dirname }}"
            state: directory
            owner: "{{ _patroni_barman_user }}"
            group: "{{ _patroni_barman_group }}"
            mode: 0755

        - name: Create SSH keypair
          community.crypto.openssh_keypair:
            path: "{{ _patroni_barman_ssh_keypair }}"
            mode: 0600
          retries: 2
          delay: 5
          become_user: "{{ _patroni_barman_user }}"
          register: _barman_keypair

        - name: Distribute SSH public keys
          ansible.posix.authorized_key:
            comment: "{{ item }}"
            user: "{{ _postgresql_user }}"
            key: "{{ _barman_keypair.public_key }}"
          loop_control:
            label: "{{ _patroni_barman_user }}@{{ inventory_hostname }} -> {{ item }}"
          loop: "{{ groups[_patroni_cluster_hostgroup] }}"
          delegate_to: "{{ item }}"

    - name: List Barman cluster configuration templates
      ansible.builtin.find:
        paths: "{{ _patroni_barman_conf_dir }}"
        file_type: any
        patterns: "*-template"
      register: _barman_cluster_templates

    - name: Remove Barman cluster configuration templates
      ansible.builtin.file:
        dest: "{{ item }}"
        state: absent
      loop: "{{ _barman_cluster_templates.files | map(attribute='path') }}"

    - name: Create Barman backup directory
      ansible.builtin.file:
        path: "{{ _patroni_barman_backup_dir }}"
        state: directory
        owner: "{{ _patroni_barman_user }}"
        group: "{{ _patroni_barman_user }}"
        mode: 0750

    - name: Manage Barman server configuration
      ansible.builtin.template:
        src: "barman.main.conf.j2"
        dest: "{{ _patroni_barman_conf_file }}"
        owner: "{{ _patroni_barman_user }}"
        group: "{{ _patroni_barman_user }}"
        mode: 0640
      vars:
        _conf_user: "{{ _patroni_barman_user }}"
        _conf_group: "{{ _patroni_barman_group }}"
        _conf_dir: "{{ _patroni_barman_conf_dir }}"
        _conf_home: "{{ _patroni_barman_backup_dir }}"
        _conf_log_file: "{{ _patroni_barman_conf_log_file }}"
        _conf_log_level: "{{ _patroni_barman_conf_log_level }}"
        _conf_bwlimit: "{{ _patroni_barman_conf_bwlimit }}"
        _conf_compression: "{{ _patroni_barman_conf_compression }}"
        _conf_extra: "{{ _patroni_barman_conf_include }}"

    - name: Manage Barman pgpass
      ansible.builtin.template:
        src: "pgpass.j2"
        dest: "{{ _patroni_barman_home }}/.pgpass"
        owner: "{{ _patroni_barman_user }}"
        group: "{{ _patroni_barman_user }}"
        mode: 0600
      vars:
        _conf_db_user: "{{ _patroni_cluster_barman_username }}"
        _conf_db_pass: "{{ _patroni_cluster_barman_password }}"
        _conf_backup_host: "127.0.0.1"
        _conf_backup_port: "{{ _patroni_haproxy_port_psql_master_local }}"

    - name: Update Barman cluster configuration
      block:
        - name: Manage Barman cluster configuration
          ansible.builtin.template:
            src: "barman.cluster.conf.j2"
            dest: "{{ _patroni_barman_conf_dir }}/{{ _conf_cluster }}.conf"
            owner: "{{ _patroni_barman_user }}"
            group: "{{ _patroni_barman_user }}"
            mode: 0640
            backup: true
          vars:
            _conf_cluster: "{{ _patroni_cluster_name }}"
            _conf_slot: "{{ _patroni_cluster_slot_barman }}"
            _conf_bindir: "{{ _postgresql_bindir }}"
            _conf_db_user: "{{ _patroni_cluster_barman_username }}"
            _conf_sshport: "{{ _patroni_haproxy_port_ssh_master_local }}"
            _conf_sshcmd: "ssh {{ _postgresql_user }}@localhost -p {{ _conf_sshport }} {{ _conf_sshopts }}"
            _conf_sshopts: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"
            _conf_backup_host: "127.0.0.1"
            _conf_backup_port: "{{ _patroni_haproxy_port_psql_master_local }}"
            _conf_extra: "{{ _patroni_barman_conf_cluster }}"
          register: barman_cluster_conf

        - name: Verify Barman cluster configuration
          block:
            - name: Initialize Barman backup
              ansible.builtin.command: "barman cron"
              become_user: "{{ _patroni_barman_user }}"

            - name: Verify Barman cluster backup configuration
              ansible.builtin.command: "barman check {{ _patroni_cluster_name }}"
              become_user: "{{ _patroni_barman_user }}"

          rescue:
            - name: Switch Barman wal
              ansible.builtin.command: "barman switch-wal {{ _patroni_cluster_name }}"
              become_user: "{{ _patroni_barman_user }}"

            - name: Reinitialize Barman cron
              ansible.builtin.command: "barman cron"
              become_user: "{{ _patroni_barman_user }}"

            - name: Verify Barman cluster backup configuration
              ansible.builtin.command: "barman check {{ _patroni_cluster_name }}"
              become_user: "{{ _patroni_barman_user }}"

      rescue:
        - name: Restore Barman cluster configuration
          ansible.builtin.copy:
            dest: "{{ _patroni_barman_conf_dir }}/{{ _conf_cluster }}.conf"
            src: "{{ barman_cluster_conf[_backup_attr] }}"
            remote_src: true
          vars:
            _backup_attr: 'backup_file'
          when: _backup_attr in barman_cluster_conf

        - name: Fail cluster configuration
          ansible.builtin.file:
            msg: "barman configuration validation failed for server {{ _patroni_cluster_name }}"

      always:
        - name: Drop Barman cluster configuration backup
          ansible.builtin.file:
            path: "{{ barman_cluster_conf[_backup_attr] }}"
            state: absent
          vars:
            _backup_attr: 'backup_file'
          when: _backup_attr in barman_cluster_conf

    - name: Manage Barman cron cronjob
      ansible.builtin.cron:
        user: "{{ _patroni_barman_user }}"
        name: "barman_cron"
        job: "barman cron 2>&1 > {{ _patroni_barman_conf_log_file | dirname }}/cron.log"
        minute: "{{ _crontab[0] }}"
        hour: "{{ _crontab[1] }}"
        day: "{{ _crontab[2] }}"
        month: "{{ _crontab[3] }}"
        weekday: "{{ _crontab[4] }}"
      vars:
        _crontab: "{{ _patroni_barman_cron_crontab | split(' ') }}"

    - name: Manage Barman backup cronjob
      ansible.builtin.cron:
        user: "{{ _patroni_barman_user }}"
        name: "barman_backup"
        job: "barman backup 2>&1 > {{ _patroni_barman_conf_log_file | dirname }}/backup.log"
        minute: "{{ _crontab[0] }}"
        hour: "{{ _crontab[1] }}"
        day: "{{ _crontab[2] }}"
        month: "{{ _crontab[3] }}"
        weekday: "{{ _crontab[4] }}"
      vars:
        _crontab: "{{ _patroni_barman_backup_crontab | split(' ') }}"
