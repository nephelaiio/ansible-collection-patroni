---
- name: Set cluster facts
  ansible.builtin.import_playbook: nephelaiio.postgresql.facts

- name: Query PostgreSQL cluster status
  hosts: "{{ _postgresql_db_group }}"
  become: true
  vars_files:
    - main.yml
  tasks:
    - name: Register cluster hosts
      ansible.builtin.add_host:
        name: "{{ inventory_hostname }}"
        groups: _cluster_all

    - name: Set PostgreSQL facts
      ansible.builtin.include_role:
        name: nephelaiio.postgresql.postgresql
        tasks_from: vars.yml

    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: End play for offline hosts
      ansible.builtin.meta: end_host
      vars:
        _service_state: "{{ services[_postgresql_service_name].state | default('running') }}"
      when: _service_state != 'running'

    - name: Query cluster status
      community.postgresql.postgresql_query:
        query: "SELECT pg_is_in_recovery()"
        db: postgres
      become: true
      become_user: "{{ _postgresql_user }}"
      register: _slave_query
      ignore_errors: true

    - name: Set cluster membership facts
      ansible.builtin.set_fact:
        _cluster_alien: "{{ _is_alien | bool }}"
        _cluster_member: "{{ _is_member | bool }}"
        _cluster_master: "{{ _is_master | bool }}"
        _cluster_slave: "{{ _is_slave | bool }}"
      vars:
        _service: "{{ _postgresql_service_name }}.service"
        _is_installed: "{{ _service in services }}"
        _is_alien: "{{ (not _is_installed) or (_slave_query is failed) }}"
        _is_member: "{{ not _is_alien }}"
        _is_slave: "{{ _is_member and _slave_query.query_result[0].pg_is_in_recovery }}"
        _is_master: "{{ _is_member and not _is_slave }}"

    - name: Group cluster members
      ansible.builtin.group_by:
        key: "_cluster_{{ 'alien' if _cluster_alien else _status }}"
      vars:
        _status: "{{ 'master' if _cluster_master else 'slave' }}"

    - name: Set hostgroup facts
      ansible.builtin.set_fact:
        _hosts_cluster: "{{ ansible_play_hosts_all }}"
        _hosts_aliens: "{{ _aliens | difference(_bootstrap) }}"
        _hosts_masters: "{{ _masters }}"
        _hosts_slaves: "{{ _slaves | difference(_bootstrap) }}"
        _hosts_bootstrap: "{{ _bootstrap }}"
      vars:
        _aliens: "{{ groups['_cluster_alien'] | default([]) }}"
        _masters: "{{ groups['_cluster_master'] | default([]) }}"
        _slaves: "{{ groups['_cluster_slave'] | default([]) }}"
        _bootstrap: "{{ [] if (_masters | length > 0) else [(_slaves + _aliens) | first] }} "

    - name: Verify cluster status
      ansible.builtin.assert:
        that:
          - _unique_master | bool
          - _slaves_have_master | bool or _slave_recover | bool
        fail_msg: "PostgreSQL cluster is in an inconsistent state"
      vars:
        _unique_master: "{{ _hosts_masters | length < 2 }}"
        _has_master: "{{ _hosts_masters | length > 0  }}"
        _has_slaves: "{{ _hosts_slaves | length > 0 }}"
        _slaves_have_master: "{{ not _has_slaves or _has_master }}"
        _slave_recover: "{{ _hosts_slaves | length == 1 and not _has_master }}"

    - name: Debug cluster bootstrap status
      ansible.builtin.debug:
        msg: "Bootstrapping new cluster on hosts {{ _hosts }} with master {{ _master }}"
      vars:
        _hosts: "[{{ ','.join(play_hosts) }}]"
        _master: "{{ _hosts_bootstrap | first }}"
      when: _hosts_bootstrap | length > 0

    - name: Debug host cluster role
      ansible.builtin.debug:
        msg: "Adding host to {{  'master' if _master else ('bootstrap' if _bootstrap else ('slave' if _slave else 'alien')) }} role"
      vars:
        _master: "{{ inventory_hostname in _hosts_masters }}"
        _bootstrap: "{{ inventory_hostname in _hosts_bootstrap }}"
        _slave: "{{ inventory_hostname in _hosts_slaves }}"

    - name: Create cluster role groups
      ansible.builtin.group_by:
        key: "_postgresql_{{ 'master' if _master else ('bootstrap' if _bootstrap else 'slave') }}"
      vars:
        _master: "{{ inventory_hostname in _hosts_masters }}"
        _bootstrap: "{{ inventory_hostname in _hosts_bootstrap }}"


- name: Deploy PostgreSQL bootstrap host
  hosts: "_postgresql_bootstrap"
  become: true
  vars_files:
    - main.yml
  roles:
    - nephelaiio.postgresql.repo
    - nephelaiio.postgresql.postgresql


- name: Deploy PostgreSQL slave hosts
  hosts: "_postgresql_slave"
  become: true
  vars_files:
    - main.yml
  roles:
    - nephelaiio.postgresql.repo
    - nephelaiio.postgresql.postgresql


- name: Deploy PostgreSQL master host
  hosts: "_postgresql_master"
  become: true
  vars_files:
    - main.yml
  roles:
    - nephelaiio.postgresql.repo
    - nephelaiio.postgresql.postgresql
