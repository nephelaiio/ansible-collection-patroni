---
- name: Verify Patroni cluster
  hosts: patroni_cluster
  any_errors_fatal: true
  vars_files:
    - ../../playbooks/vars/main.yml
  vars:
    _service: "{{ _patroni_cluster_service_name }}{{ (ansible_os_family == 'RedHat') | ternary('.service', '') }}"
  tasks:
    - name: Set PostgreSQL facts
      ansible.builtin.include_role:
        name: nephelaiio.patroni.postgresql
        tasks_from: vars.yml

    - name: Query client version
      ansible.builtin.command: psql --version
      register: _psql_version

    - name: Check client version
      ansible.builtin.assert:
        that: _version.startswith(_patroni_cluster_release)
      vars:
        _version: "{{ _psql_version.stdout.split(' ')[2] }}"

    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Debug service status
      ansible.builtin.debug:
        msg: "{{ services[_service].state }}"

    - name: Verify db services
      ansible.builtin.assert:
        that: services[_service].state == 'running'

    - name: Gather postgresql info
      community.postgresql.postgresql_info:
        filter:
          - "databases"
          - "roles"
      become: true
      become_user: "{{ _postgresql_user }}"
      register: postgresql_info

    - name: Verify requested databases
      ansible.builtin.assert:
        that: _missing_dbs | length == 0
        fail_msg: |
          Unable to find databases [{{ _requested_dbs | join(',') }}] on server.
          Existing DBs are [{{ _existing_dbs | join(',') }}]
        success_msg: "Existing DBs are [{{ _existing_dbs | join(',') }}]"
      vars:
        _existing_dbs: "{{ postgresql_info.databases | dict2items | map(attribute='key') }}"
        _requested_dbs: "{{ patroni_cluster_databases | default([]) | map(attribute='name') }}"
        _missing_dbs: "{{ _requested_dbs | reject('in', _existing_dbs) }}"

    - name: Verify requested roles
      ansible.builtin.assert:
        that: _missing_roles | length == 0
        fail_msg: |
          Unable to find roles [{{ _missing_roles | join(',') }}] on server
          Existing roles are [{{ _existing_roles | join(',') }}]
        success_msg: "Existing roles are [{{ _existing_roles | join(',') }}]"
      vars:
        _existing_roles: "{{ postgresql_info.roles | dict2items | map(attribute='key') }}"
        _requested_roles: "{{ patroni_cluster_roles | default([]) | map(attribute='name') }}"
        _missing_roles: "{{ _requested_roles | reject('in', _existing_roles) }}"

    - name: Verify user groups
      ansible.builtin.assert:
        that: item.groups | rejectattr('name', 'in', _role_groups) | length == 0
        fail_msg: "Role {{ item.name }} is not a member of groups [{{ _role_groups | join(',') }}]"
      vars:
        _existing_roles: "{{ postgresql_info.roles | dict2items }}"
        _role_groups: "{{ _existing_roles | rejectattr('value.canlogin') | map(attribute='key') }}"
      loop_control:
        label: "{{ item.name }}"
      loop: "{{ patroni_cluster_roles | default([]) | selectattr('groups', 'defined') }}"

    - name: Set PostgreSQL facts
      ansible.builtin.include_role:
        name: nephelaiio.patroni.postgresql
        tasks_from: vars.yml

    - name: Query data checksum
      community.postgresql.postgresql_query:
        db: postgres
        query: 'SHOW data_checksums'
      become: true
      become_user: "{{ _postgresql_user }}"
      register: postgresql_checksums

    - name: Verify data checksum
      ansible.builtin.assert:
        that: postgresql_checksums.query_result[0].data_checksums == "on"

    - name: Verify Patroni cluster status
      block:
        - name: Stat Patroni configuration file
          ansible.builtin.stat:
            path: "{{ _patroni_cluster_config_file }}"
          register: _patroni_config_stat

        - name: Slurp Patroni configuration
          ansible.builtin.slurp:
            path: "{{ _patroni_cluster_config_file }}"
          become: true
          register: _patroni_config_query

        - name: Set Patroni configuration facts
          ansible.builtin.set_fact:
            _api_username: "{{ _config_data.restapi.authentication.username }}"
            _api_password: "{{ _config_data.restapi.authentication.password }}"
          vars:
            _config_data: "{{ _patroni_config_query.content | ansible.builtin.b64decode | from_yaml }}"

        - name: Verify member liveness
          ansible.builtin.uri:
            url: "http://localhost:8008/liveness"
            user: "{{ _api_username }}"
            password: "{{ _api_password }}"
            method: GET
            status_code: 200
            timeout: 3

        - name: Query cluster status
          ansible.builtin.uri:
            url: "http://localhost:8008/cluster"
            user: "{{ _api_username }}"
            password: "{{ _api_password }}"
            method: GET
            status_code: 200
            timeout: 3
            return_content: true
          register: _cluster_status_query

        - name: Verify cluster master
          ansible.builtin.assert:
            that: _masters | length == 1
            success_msg: "Found cluster master {{ (_masters | first).name }}"
            fail_msg: "Cluster does not have a master"
          vars:
            _members: "{{ _cluster_status_query.json.members }}"
            _masters: "{{ _members | selectattr('role', 'equalto', 'leader') }}"

        - name: Verify cluster member status
          ansible.builtin.assert:
            that:
              - _status.role in ['leader', 'replica', 'sync_standby']
              - _status.state in ['running', 'streaming']
          vars:
            _members: "{{ _cluster_status_query.json.members }}"
            _status: "{{ _members | selectattr('name', 'equalto', inventory_hostname) | first }}"

    - name: Verify Consul cluster status
      block:
        - name: Query Consul node cluster status
          ansible.builtin.shell: "consul members listNode | grep {{ inventory_hostname }} | awk '{print $3}'"
          register: _consul_node_status
          changed_when: false
          no_log: true

        - name: Check Consul node cluster status
          ansible.builtin.assert:
            that: _status == _expected
            fail_msg: "Expected consul node type '{{ _expected }}', got '{{ _status }}'"
            success_msg: "Consul node type is '{{ _status }}'"
          vars:
            _status: "{{ _consul_node_status.stdout }}"
            _expected: 'alive'

    - name: Verify Consul cluster status
      block:
        - name: Query Consul node cluster status
          ansible.builtin.shell: "consul members listNode | grep {{ inventory_hostname }} | awk '{print $4}'"
          register: _consul_node_type
          changed_when: false

        - name: Check Consul node cluster status
          ansible.builtin.assert:
            that: _status == _expected
            fail_msg: "Expected consul node type '{{ _expected }}', got '{{ _status }}'"
            success_msg: "Consul node type is '{{ _status }}'"
          vars:
            _status: "{{ _consul_node_type.stdout }}"
            _expected: 'client'


- name: Verify Consul cluster
  hosts: patroni_consul
  any_errors_fatal: true
  vars_files:
    - ../../playbooks/vars/main.yml
  tasks:
    - name: Verify Consul cluster status
      block:
        - name: Query Consul node cluster status
          ansible.builtin.shell: "consul members listNode | grep {{ inventory_hostname }} | awk '{print $3}'"
          register: _consul_node_status
          changed_when: false
          no_log: true

        - name: Check Consul node cluster status
          ansible.builtin.assert:
            that: _status == _expected
            fail_msg: "Expected consul node type '{{ _expected }}', got '{{ _status }}'"
            success_msg: "Consul node type is '{{ _status }}'"
          vars:
            _status: "{{ _consul_node_status.stdout }}"
            _expected: 'alive'

    - name: Verify Consul node type status
      block:
        - name: Query Consul node cluster status
          ansible.builtin.shell: "consul members listNode | grep {{ inventory_hostname }} | awk '{print $4}'"
          register: _consul_node_type
          changed_when: false

        - name: Check Consul node cluster status
          ansible.builtin.assert:
            that: _status == _expected
            fail_msg: "Expected consul node type '{{ _expected }}', got '{{ _status }}'"
            success_msg: "Consul node type is '{{ _status }}'"
          vars:
            _status: "{{ _consul_node_type.stdout }}"
            _expected: 'server'

    - name: Verify apt Consul package lock
      ansible.builtin.command:
        cmd: "apt-mark showhold | grep consul"
      when: ansible_os_family == "Debian"
      changed_when: false

    - name: Verify yum package lock
      ansible.builtin.command:
        cmd: "grep consul /etc/yum/pluginconf.d/versionlock.list"
      when: ansible_os_family == "RedHat"
      changed_when: false
